// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "gitlab.ozon.dev/Vanek623/task-manager-system/internal/pkg/service/models"
	models0 "gitlab.ozon.dev/Vanek623/task-manager-system/internal/pkg/service/storage/models"
)

// MockiService is a mock of iService interface.
type MockiService struct {
	ctrl     *gomock.Controller
	recorder *MockiServiceMockRecorder
}

// MockiServiceMockRecorder is the mock recorder for MockiService.
type MockiServiceMockRecorder struct {
	mock *MockiService
}

// NewMockiService creates a new mock instance.
func NewMockiService(ctrl *gomock.Controller) *MockiService {
	mock := &MockiService{ctrl: ctrl}
	mock.recorder = &MockiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiService) EXPECT() *MockiServiceMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockiService) AddTask(ctx context.Context, data *models.AddTaskData) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", ctx, data)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTask indicates an expected call of AddTask.
func (mr *MockiServiceMockRecorder) AddTask(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockiService)(nil).AddTask), ctx, data)
}

// DeleteTask mocks base method.
func (m *MockiService) DeleteTask(ctx context.Context, data *models.DeleteTaskData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockiServiceMockRecorder) DeleteTask(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockiService)(nil).DeleteTask), ctx, data)
}

// GetTask mocks base method.
func (m *MockiService) GetTask(ctx context.Context, data *models.GetTaskData) (*models.DetailedTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, data)
	ret0, _ := ret[0].(*models.DetailedTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockiServiceMockRecorder) GetTask(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockiService)(nil).GetTask), ctx, data)
}

// TasksList mocks base method.
func (m *MockiService) TasksList(ctx context.Context, data *models.ListTaskData) ([]*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TasksList", ctx, data)
	ret0, _ := ret[0].([]*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TasksList indicates an expected call of TasksList.
func (mr *MockiServiceMockRecorder) TasksList(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TasksList", reflect.TypeOf((*MockiService)(nil).TasksList), ctx, data)
}

// UpdateTask mocks base method.
func (m *MockiService) UpdateTask(ctx context.Context, data *models.UpdateTaskData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockiServiceMockRecorder) UpdateTask(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockiService)(nil).UpdateTask), ctx, data)
}

// MockiStorage is a mock of iStorage interface.
type MockiStorage struct {
	ctrl     *gomock.Controller
	recorder *MockiStorageMockRecorder
}

// MockiStorageMockRecorder is the mock recorder for MockiStorage.
type MockiStorageMockRecorder struct {
	mock *MockiStorage
}

// NewMockiStorage creates a new mock instance.
func NewMockiStorage(ctrl *gomock.Controller) *MockiStorage {
	mock := &MockiStorage{ctrl: ctrl}
	mock.recorder = &MockiStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiStorage) EXPECT() *MockiStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockiStorage) Add(ctx context.Context, data *models0.AddTaskData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockiStorageMockRecorder) Add(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockiStorage)(nil).Add), ctx, data)
}

// Delete mocks base method.
func (m *MockiStorage) Delete(ctx context.Context, data *models.DeleteTaskData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockiStorageMockRecorder) Delete(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockiStorage)(nil).Delete), ctx, data)
}

// Get mocks base method.
func (m *MockiStorage) Get(ctx context.Context, data *models.GetTaskData) (*models.DetailedTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, data)
	ret0, _ := ret[0].(*models.DetailedTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockiStorageMockRecorder) Get(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockiStorage)(nil).Get), ctx, data)
}

// List mocks base method.
func (m *MockiStorage) List(ctx context.Context, data *models.ListTaskData) ([]*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, data)
	ret0, _ := ret[0].([]*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockiStorageMockRecorder) List(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockiStorage)(nil).List), ctx, data)
}

// Update mocks base method.
func (m *MockiStorage) Update(ctx context.Context, data *models.UpdateTaskData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockiStorageMockRecorder) Update(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockiStorage)(nil).Update), ctx, data)
}
